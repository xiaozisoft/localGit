#include "stdafx.h"
#include "testData.h"
#include <iostream>
#include <string>
#include "tool.h"

std::array<unsigned char, 64> readDdrDataFile::ddrInData = { \
        0x13, 0x52, 0x40, 0x85, 0x8e, 0x0b, 0x12, 0x58, \
        0x07, 0x65, 0xa0, 0x94, 0xa1, 0xad, 0x71, 0x45, \
        0x5e, 0xb1, 0x3b, 0x0d, 0x7e, 0x88, 0xbb, 0x28, \
        0xd8, 0x78, 0x9c, 0x15, 0x44, 0x68, 0x56, 0xb1, \
        0xf0, 0xd2, 0x11, 0xbc, 0xcf, 0x01, 0x74, 0x08, \
        0xe3, 0xc9, 0xa2, 0x5a, 0xb6, 0x9e, 0x00, 0xa5, \
        0xab, 0xa4, 0x21, 0x1d, 0x5c, 0x50, 0xa2, 0x30, \
        0x04, 0xeb, 0x14, 0xcb, 0xd8, 0xe3, 0xca, 0x35 };
//0x11, 0x11, 0x11, 0x11, 0x12, 0x12, 0x12, 0x12, \
//0x13, 0x13, 0x13, 0x13, 0x14, 0x14, 0x14, 0x14, \
//0x15, 0x15, 0x15, 0x15, 0x16, 0x16, 0x16, 0x16, \
//0x17, 0x17, 0x17, 0x17, 0x18, 0x18, 0x18, 0x18, \
//0x21, 0x21, 0x21, 0x21, 0x22, 0x22, 0x22, 0x22, \
//0x23, 0x23, 0x23, 0x23, 0x24, 0x24, 0x24, 0x24, \
//0x25, 0x25, 0x25, 0x25, 0x26, 0x26, 0x26, 0x26, \
//0x27, 0x27, 0x27, 0x27, 0x28, 0x28, 0x28, 0x28 };
//0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
            //0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
        //0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
        //0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
        //0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
        //0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
        //0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \
        //0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
//0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, \
        //0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, \
        //0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, \
        //0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, \
        //0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, \
        //0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, \
        //0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, \
        //0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF };
//0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, \
        //0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, \
        //0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, \
        //0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, \
        //0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, \
        //0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, \
        //0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, \
        //0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11 };


readDdrDataFile::readDdrDataFile()
{
    fin.open(DefaultDdrDataFilePath);
}
readDdrDataFile::~readDdrDataFile()
{
    fin.close();
}

void readDdrDataFile::readDdrDataInput()
{
    if (fin)
    {
        std::vector<unsigned char> dataList; // 存放分割后的字符串
        std::string sTmp;
        unsigned int tmpUnint = 0;
        while (std::getline(fin, sTmp))
        {
            int comma_n = 0;
            do
            {
                std::string tmpSubStr = "";
                comma_n = sTmp.find(" ");
                if (-1 == comma_n)
                {
                    tmpSubStr = sTmp.substr(0, sTmp.length());
                    tmpUnint = hexStringToUint(tmpSubStr);
                    dataList.push_back(tmpUnint & 0xFF);
                    break;
                }
                tmpSubStr = sTmp.substr(0, comma_n);
                sTmp.erase(0, comma_n + 1);
                tmpUnint = hexStringToUint(tmpSubStr);
                dataList.push_back(tmpUnint & 0xFF);
            } while (true);

            //initData.push_back(tmpUnit);
            //std::cout << "Read from file: " << s << std::endl;
        }
        if (dataList.size() <= ddrInData.size())
        {
            for (size_t i = 0; i < dataList.size(); i++)
            {
                ddrInData[i] = dataList.at(i);
            }
        }
    }
    return;
}